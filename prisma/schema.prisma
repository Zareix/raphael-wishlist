generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    wishlistItems WishlistItem[]
    categoris     Category[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ItemLink {
    id             String       @id @default(cuid())
    name           String
    price          Float?
    link           String       @db.Text
    wishlistItem   WishlistItem @relation(fields: [wishlistItemId], references: [id])
    wishlistItemId String

    @@index([wishlistItemId])
}

model ItemImage {
    id             String       @id @default(cuid())
    image          String       @db.Text
    wishlistItem   WishlistItem @relation(fields: [wishlistItemId], references: [id])
    wishlistItemId String

    @@index([wishlistItemId])
}

model WishlistItem {
    id         String       @id @default(cuid())
    name       String
    price      Float?
    currency   EnumCurrency
    images     ItemImage[]
    links      ItemLink[]
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    category   Category     @relation(fields: [categoryId], references: [id])
    categoryId String

    @@index([categoryId])
    @@index([userId])
}

model Category {
    id               String         @id @default(cuid())
    name             String
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String
    wishlistItems    WishlistItem[]
    parentCategoryId String?
    parentCategory   Category?      @relation("CategorySubCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    subCategories    Category[]     @relation("CategorySubCategory")

    @@index([parentCategoryId])
    @@index([userId])
}

enum EnumCurrency {
    USD
    EUR
}
